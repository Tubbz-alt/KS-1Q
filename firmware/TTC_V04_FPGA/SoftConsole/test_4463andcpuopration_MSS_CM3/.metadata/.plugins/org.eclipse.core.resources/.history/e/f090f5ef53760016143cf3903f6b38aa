#include "m2sxxx.h"
#include "mss_gpio.h"
#include "radio_tx_config.h"
#include "bsp_si4463.h"
#include "mss_spi.h"

#include <string.h>
#include <stdio.h>

#define Flag_Register_Addr_0 0x30000000
#define Tx_Base_Addr_A       0x30002000
#define Tx_Base_Addr_B       0x30004000
#define Rec_Base_Addr_A      0x30006000
#define Rec_Base_Addr_B      0x30008000
#define Packet_Data_Num      225

 uint8_t cmd[8];
 uint8_t property[16];
 uint32_t data_buff[56];

 uint8_t temp=0;


 volatile uint32_t ADDR_A=Tx_Base_Addr_A;
 volatile uint32_t ADDR_B=Tx_Base_Addr_B;

/*
uint8_t CPU_Send_Data( uint32_t *data)
{
	uint32_t flag=0,set_flag_a=0,set_flag_b=0;
//	uint8_t i=1;
//	uint32_t *addr=(uint32_t *)0x30000000;
//	uint32_t *addr=(uint32_t *)0x30002000;
	memcpy(&flag,(uint32_t *)0x30000000,1);
	//flag=*((uint32_t *)0x30000000);
	set_flag_a=flag|0x00000001;
	set_flag_b=flag|0x00000002;
	if(!(flag&0x00000001))
	{
		memcpy((uint32_t *)0x30002000,data,56);
		*(uint32_t *)0x30000000=set_flag_a;
		flag=*(uint32_t *)0x30006000;
		return 1;
	}
	else if(!(flag&0x00000002))
	{
		memcpy((uint32_t *)0x30004000,data,56);
		memcpy((uint32_t *)0x30000000,&set_flag_b,1);
		return 1;
	}
	else
	{

		return 0;
	}
}*/

uint8_t CPU_Read_Data( void)
{
	uint32_t flag=0,set_flag_a=0,set_flag_b=0,set_flag_int=0;
	memcpy(&flag,(uint32_t *)0x30000000,1);
	//flag=*((uint32_t *)0x30000000);
	set_flag_a=flag&(~0x00000004);
	set_flag_b=flag&(~0x00000008);
	if(flag&0x00000080)
	{
		set_flag_int=flag&(~0x00000080);
		memcpy((uint32_t *)0x30000000,&set_flag_int,1);
	}
	if(flag&0x00000004)
	{
		memcpy(data_buff,(uint32_t *)0x30006000,56);
		*(uint32_t *)0x30000000=set_flag_a;
		flag=*(uint32_t *)0x30006000;
		return 1;
	}
	else if(flag&0x00000008)
	{
		memcpy(data_buff,(uint32_t *)0x30008000,56);
		memcpy((uint32_t *)0x30000000,&set_flag_b,1);
		return 1;
	}
	else
	{

		return 0;
	}
}


int main()
{

	uint8_t num=0;
/*	uint8_t i;
	uint8_t Flag_Register=0;
*/
/*	MSS_UART_polled_tx(&g_mss_uart0,
			&i,
			sizeof(i));*/
/*
	MSS_SPI_init(&g_mss_spi0);
	MSS_SPI_configure_master_mode
	(
			&g_mss_spi0,
			MSS_SPI_SLAVE_0,
			MSS_SPI_MODE0,
			10,
			MSS_SPI_BLOCK_TRANSFER_FRAME_SIZE
	);
*/

/*	MSS_GPIO_init();
	MSS_GPIO_config
	(
			MSS_GPIO_0, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE);
	MSS_GPIO_config
	(
			MSS_GPIO_1, MSS_GPIO_OUTPUT_MODE );
	MSS_GPIO_set_output(MSS_GPIO_1, 0);
	//4463 initial
	vRadio_Init();
//	si446x_part_info();
	vRadio_StartTX(0X5A);

*/uint32_t data=0;
	for(num=0;num<Packet_Data_Num;num+=4)
			{

		data |=num+4;
		data =data <<8;
		data |=num+3;
		data =data <<8;
		data |=num+2;
		data =data <<8;
		data |=num+1;
		data =data<<8;
		data_buff[num/4]=data;
		data=0;
			}

			//MSS_GPIO_enable_irq( MSS_GPIO_0 );
	while( 1 )
	{

		if(!CPU_Read_Data());
//		  i=i+1;
	}
}

void GPIO0_IRQHandler (void)
{
	//GPIO->GPIO_IRQ|=1<<0;
	temp+=1;
	MSS_GPIO_clear_irq(MSS_GPIO_0);

}
